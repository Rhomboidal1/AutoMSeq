---------------------------------------------------------------------------
InvalidWindowHandle                       Traceback (most recent call last)
File ~\AppData\Local\miniconda3\Lib\site-packages\spyder_kernels\customize\utils.py:209, in exec_encapsulate_locals(code_ast, globals, locals, exec_fun, filename)
    207     if filename is None:
    208         filename = "<stdin>"
--> 209     exec_fun(compile(code_ast, filename, "exec"), globals, None)
    210 finally:
    211     if use_locals_hack:
    212         # Cleanup code

File \\w2k16\abisync\data\testing\automseq\mseq_automation\testingprograms\ui_dialog_explorer.py:133
    130             logfile.write(f"\n\nDialog Explorer stopped: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
    132 if __name__ == "__main__":
--> 133     dialog_explorer()

File \\w2k16\abisync\data\testing\automseq\mseq_automation\testingprograms\ui_dialog_explorer.py:31, in dialog_explorer()
     28 try:
     29     while True:
     30         # Get current windows
---> 31         current_windows = set(window.window_text() for window in Desktop(backend="win32").windows())
     33         # Find new windows
     34         new_windows = current_windows - initial_windows

File ~\AppData\Local\miniconda3\Lib\site-packages\pywinauto\__init__.py:139, in Desktop.windows(self, **kwargs)
    136 kwargs['backend'] = self.backend.name
    138 windows = findwindows.find_elements(**kwargs)
--> 139 return [self.backend.generic_wrapper_class(win) for win in windows]

File ~\AppData\Local\miniconda3\Lib\site-packages\pywinauto\controls\hwndwrapper.py:180, in HwndWrapper.__new__(cls, element)
    178 def __new__(cls, element):
    179     """Construct the control wrapper"""
--> 180     return super(HwndWrapper, cls)._create_wrapper(cls, element, HwndWrapper)

File ~\AppData\Local\miniconda3\Lib\site-packages\pywinauto\base_wrapper.py:129, in BaseWrapper._create_wrapper(cls_spec, element_info, myself)
    126 new_class = cls_spec.find_wrapper(element_info)
    127 obj = object.__new__(new_class)
--> 129 obj.__init__(element_info)
    131 return obj

File ~\AppData\Local\miniconda3\Lib\site-packages\pywinauto\controls\hwndwrapper.py:1496, in DialogWrapper.__init__(self, hwnd)
   1489 def __init__(self, hwnd):
   1490     """Initialize the DialogWrapper
   1491 
   1492     The only extra functionality here is to modify self.friendlyclassname
   1493     to make it "Dialog" if the class is "#32770" otherwise to leave it
   1494     the same as the window class.
   1495     """
-> 1496     HwndWrapper.__init__(self, hwnd)
   1498     if self.class_name() == "#32770":
   1499         self.friendlyclassname = "Dialog"

File ~\AppData\Local\miniconda3\Lib\site-packages\pywinauto\controls\hwndwrapper.py:201, in HwndWrapper.__init__(self, element_info)
    199 # verify that we have been passed in a valid windows handle
    200 if not handleprops.iswindow(self.handle):
--> 201     raise InvalidWindowHandle(self.handle)
    203 # make it so that ctypes conversion happens correctly
    204 self._as_parameter_ = self.handle

InvalidWindowHandle: Handle 789570 is not a vaild window handle